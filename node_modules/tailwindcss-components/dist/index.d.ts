/// <reference types="react" />
declare const twc: {
    symbol: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    object: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    big: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    link: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    small: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    sub: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    sup: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    track: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    progress: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    a: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    abbr: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    address: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    area: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    article: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    aside: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    audio: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    b: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    base: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    bdi: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    bdo: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    blockquote: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    body: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    br: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    button: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    canvas: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    caption: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    cite: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    code: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    col: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    colgroup: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    data: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    datalist: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    dd: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    del: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    details: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    dfn: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    dialog: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    div: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    dl: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    dt: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    em: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    embed: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    fieldset: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    figcaption: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    figure: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    footer: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    form: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    h1: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    h2: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    h3: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    h4: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    h5: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    h6: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    head: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    header: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    hgroup: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    hr: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    html: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    i: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    iframe: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    img: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    input: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    ins: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    kbd: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    label: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    legend: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    li: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    main: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    map: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    mark: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    menu: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    meta: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    meter: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    nav: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    noscript: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    ol: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    optgroup: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    option: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    output: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    p: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    param: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    picture: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    pre: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    q: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    rp: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    rt: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    ruby: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    s: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    samp: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    script: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    section: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    select: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    slot: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    source: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    span: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    strong: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    style: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    summary: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    table: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    tbody: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    td: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    template: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    textarea: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    tfoot: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    th: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    thead: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    time: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    title: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    tr: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    u: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    ul: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    var: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    video: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    wbr: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    circle: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    clipPath: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    defs: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    desc: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    ellipse: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feBlend: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feColorMatrix: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feComponentTransfer: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feComposite: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feConvolveMatrix: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feDiffuseLighting: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feDisplacementMap: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feDistantLight: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feFlood: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feFuncA: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feFuncB: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feFuncG: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feFuncR: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feGaussianBlur: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feImage: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feMerge: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feMergeNode: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feMorphology: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feOffset: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    fePointLight: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feSpecularLighting: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feSpotLight: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feTile: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feTurbulence: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    filter: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    foreignObject: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    g: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    image: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    line: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    linearGradient: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    marker: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    mask: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    metadata: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    path: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    pattern: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    polygon: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    polyline: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    radialGradient: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    rect: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    stop: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    svg: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    switch: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    text: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    textPath: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    tspan: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    use: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    view: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    menuitem: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    keygen: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    noindex: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    webview: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    animate: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    animateMotion: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    animateTransform: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    feDropShadow: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    mpath: (strings: TemplateStringsArray) => (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
};
export default twc;
